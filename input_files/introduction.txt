Line Formatter:  A CLI Application for Plain Text Files
        
line_formatter.py is a command line application with a simple  purpose: enforce user-defined line breaks in a plain text file.  Not only do  line breaks make plain text files more readable, they also allow plain text  to serve as an intermediary to other file formats, such as markdown and markup.  This application facilitates that process.
   
In addition to its core line break functionality, line_formatter.py provides some markdown specific features, like the ability to end lines with break-tags and designate whether a line is a header.  This has expedited my ability to write clean, concise markdown.  I’m sure plenty of alternatives exist.  On the off chance that I am mistaken, however, my modest application is made available here.
                                
Broadly speaking, the application slices a text file’s lines into keep and send components.  These components are used to create nodes in a linked list.  Once all of the nodes have been linked, the node’s contents are merged into a string, which is returned to the user.
        
Table of Contents
                           
format_fns.py
            
This module contains four functions: get_attrs, split_at, keep_line, and send_line.  Collectively, they are used to create the nodes that compose a linked list.  The eval_node method - a member function of the Node class - calls this group of functions to format a node’s line value.
               
linked_list.py
                      
A linked list is a memory efficient data structure that is well suited for insert and delete operations. It is composed of nodes, objects that contain some data and a pointer to another node.  This pointer allows the list to be stored non-sequentially in memory.  Moreover, in the event that a value must be inserted or deleted, no shifting takes place.  Rather, the pointers for the affected nodes are amended to reflect the updated structure.  The linked list is instantiated with a node designated as the head, which serves as the entry point to the other nodes in the list.  
           
The linked_list module implements this data structure.  The Node class has three attributes: line, length, and next.  Line is a string taken from the input file.  This attribute is accessed by the eval_node method, which calls keep_line and send_line to create keep and send components.  Line is set equal to the keep component, while the send component is pushed to the next node and concatenated with that node’s line value.  Length is the user provided number of characters in a line.  Note that, in the event that the user does not provide a line length, it defaults to eighty.  Effectively, all nodes inherit the head node’s length value.
             
The LinkedList class has two methods: eval_recursive and merge_nodes.  Taking a linked list as an argument, the former uses recursion to create new nodes to accommodate the changing structure of the input.  The latter merges the list’s line values into a single string.
   
get_nodes.py
               
The get_nodes module contains two functions that create the initial linked list passed to eval_recursive.   Model lines, a helper function, returns a list of two-tuples that index whether any given line is followed by a non-empty line.  create_nodes takes this list as an argument and returns a dictionary of node values, where the head node is accessed by the key 0.
            
parse_args.py
        
Utilizing python’s argparse library, parse_args.py instantiates an ArgumentParser object named ‘parser,’  which creates the command line interface the user interacts with to run the program.
           
exceptions.py
        
Raises an error if the file passed to the command line interface does not end in ‘.txt’.
                       
line_formatter.py
              
This module serves as the entry point to the command line application.  It contains four functions - add_breaks, add_headers, preview, and create_file - that are responsible for modifying the output returned by the merge_nodes method. 
                           